{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "jsfix.js.map",
  "sourcesContent": [
    "(function ( jsroot ) {\n    \"use strict\";\n\n    // Collecting helper methods.\n    var methods = {\n        /**\n         * String Checker\n         * Check does the argument type is a string.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isString( arg ) {\n            return 'string' === typeof arg ? true : false;\n        },\n\n        /**\n         * Function Checker\n         * Check does the argument type is a function.\n         *\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isFunction( arg ) {\n            return 'function' === typeof arg ? true : false;\n        },\n\n        /**\n         * Object Checker\n         * Check does the argument type is an object and not an array.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isObject( arg ) {\n            return 'object' === typeof arg && !Array.isArray(arg) ? true : false;\n        },\n\n        /**\n         * Array Checker\n         * Check does the argument type is an array.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isArray( arg ) {\n            return Array.isArray(arg);\n        },\n\n        /**\n         * Boolean Checker\n         * Check does the argument type is a boolean.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isBoolean( arg ) {\n            return 'boolean' === typeof arg ? true : false;\n        },\n\n        /**\n         * Number Checker\n         * Check does the argument type is a number.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isNumber( arg ) {\n            return 'number' === typeof arg ? true : false;\n        },\n\n        /**\n         * Date Checker\n         * Check does the argument type is a date.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isDate( arg ) {\n            return !isNaN(new Date(arg).getDate()) ? true : false;\n        },\n\n        /**\n         * URL Checker\n         * Check does the argument type is a URL.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isURL( arg ) {\n            return /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i.test(arg) ? true : false;\n        },\n\n        /**\n         * Email Checker\n         * Check does the argument type is an Email.\n         *\n         * @param arg - Argument variable name.\n         * @returns {boolean}\n         */\n        isEmail( arg ) {\n            return /^([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i.test(arg) ? true : false;\n        },\n    }\n\n    // Adding the helper methods to the global object, and lock them.\n    for ( var key in methods ) {\n        var value = methods[ key ];\n\n        Object.defineProperty(jsroot, key, {\n            enumerable : false,\n            writable   : false,\n            value      : value\n        });\n    }\n})('undefined' !== typeof global ? global : {});\n\r\n(function ( jsroot ) {\n    \"use strict\";\n\n    /* Simple Object or Array Looper */\n    class Looper {\n        constructor ( oba ) {\n            this.type   = 'object';\n            this.items  = [];\n            this.length = 0;\n            this.cursor = 0;\n            this.looper = false;\n            this.final  = false;\n\n            if ( 'object' === typeof oba && !Array.isArray(oba) ) {\n                for ( var key in oba ) {\n                    if ( oba.hasOwnProperty(key) ) {\n                        this.items.push({ key : key, value : oba[ key ] });\n                        this.length += 1;\n                    }\n                }\n            }\n            else if ( Array.isArray(oba) ) {\n                this.type   = 'array';\n                this.items  = oba;\n                this.length = oba.length;\n            }\n        }\n\n        next () {\n            if ( 'function' === typeof this.looper ) {\n                if ( this.cursor < this.length ) {\n                    /* Getting Next Item */\n                    var item = this.items[ this.cursor ];\n\n                    /* Increase cursor */\n                    this.cursor += 1;\n\n                    /* Call the loop handler */\n                    if ( this.type === 'object' ) {\n                        this.looper.call(this, item.key, item.value, this);\n                    }\n                    else {\n                        this.looper.call(this, item, (this.cursor - 1), this);\n                    }\n                }\n                else {\n                    if ( this.final ) {\n                        this.final.call(this);\n                    }\n                }\n            }\n\n            return this;\n        }\n\n        each ( fn ) {\n            if ( 'function' === typeof fn ) {\n                /* Save loop handler */\n                this.looper = fn;\n\n                /* Run looper */\n                this.next();\n            }\n\n            return this;\n        }\n\n        then ( fn ) {\n            if ( 'function' === typeof fn ) {\n                this.final = fn;\n            }\n        }\n    }\n\n    // Collecting helper methods.\n    var methods = {\n        /**\n         * Object or Array Looper\n         * Loop through array item or object properties, and wait until this.next() invoked to proceed the next items.\n         *\n         * @param arg - Array or object to iterate.\n         * @param fn  - Iterator handler.\n         * @returns {*}\n         */\n        forwait( arg, fn ) {\n            return new Looper(arg).each(fn);\n        }\n    }\n\n    // Adding the helper methods to the global object, and lock them.\n    for ( var key in methods ) {\n        var value = methods[ key ];\n\n        Object.defineProperty(jsroot, key, {\n            enumerable : false,\n            writable   : false,\n            value      : value\n        });\n    }\n})('undefined' !== typeof global ? global : {});\n\r\n(function ( jsroot ) {\n    'use strict';\n\n    /**\n     * Object Patches\n     * This patches contains javascript object patch to add some functionality to help developers working with object.\n     * The common patches is methods to work with object path, including path getter and setter, path parser, etc.\n     * The iteration also useful since it works with both object, array, string, etc.\n     *\n     * @type {any}\n     */\n    let patches = {\n        /**\n         * Path Value Getter\n         * This function will get object value by the given path.\n         *\n         * @param path {string} - String path. E.g: 'people.child.first.wife.name'.\n         * @param defvalue [any]  - Default value when the given path is return undefined.\n         * @returns {*}\n         */\n        $get : function ( path, defvalue ) {\n            if ( !'string' === typeof path ) return;\n\n            /* Define current scope, paths list, result and done status */\n            let current = this, paths = path.split(this.__delimiter || '.'), result, done;\n\n            /* Iterate deeply until done */\n            while ( !done && paths.length > 0 ) {\n                /* Define next object */\n                let next = paths[ 0 ];\n\n                if ( paths.length <= 1 ) {\n                    /* Check last path and adding result if exist */\n                    if ( 'undefined' !== typeof current[ next ] ) {\n                        result = current[ next ];\n                    }\n                    else {\n                        result = undefined;\n                        done   = true;\n                    }\n                }\n                else {\n                    /* Continue if next target is exist */\n                    if ( 'object' === typeof current[ next ] ) {\n                        /* Update current scope */\n                        current = current[ next ];\n                    }\n\n                    /* Escape in first not found */\n                    else {\n                        result = undefined;\n                        done   = true;\n                    }\n                }\n\n                /* Define next path by slicing the paths list */\n                paths = paths.slice(1);\n            }\n\n            /* Return default value if the given path is undefined, and the default value is defined */\n            if ( typeof result === 'undefined' && typeof defvalue !== 'undefined' ) {\n                return defvalue;\n            }\n\n            /* Returning the result */\n            return result;\n        },\n\n        /**\n         * Path Value Setter\n         * This function will set object value by the give path and value.\n         *\n         * @param path {string} - String path. E.g: 'people.address'.\n         * @param value {any}   - The value to be set to the path.\n         * @returns {object}\n         */\n        $set : function ( path, value ) {\n            if ( !'string' === typeof path ) return;\n\n            /* Define current scope and paths list */\n            let current = this, paths = path.split(this.__delimiter || '.');\n\n            /* Iterate scopes until done */\n            while ( paths.length > 0 ) {\n                /* Define next target */\n                let next = paths[ 0 ];\n\n                /* Apply the value if current path is the last path */\n                if ( paths.length <= 1 ) {\n                    current[ next ] = value;\n                    current         = current[ next ];\n                }\n                /* Continue to iterate if still have next path */\n                else {\n                    if ( 'object' === typeof current[ next ] ) {\n                        /* Use next scope if exist and updating current scope */\n                        current = current[ next ];\n                    }\n                    else {\n                        /* Create next scope if not exist and updating current scope */\n                        current[ next ] = {};\n                        current         = current[ next ];\n                    }\n                }\n\n                /* Define next path by slicing paths list */\n                paths = paths.slice(1);\n            }\n\n            /* Return the object it self */\n            return this;\n        },\n\n        /**\n         * Array Item Adder\n         * This function will add new item to the array by the given path.\n         *\n         * @param path {string} - String path. E.g: 'people.childs'.\n         * @param value {any}   - The value to be added to the array.\n         * @returns {object}\n         */\n        $add : function ( path, value ) {\n            if ( Array.isArray(this.$get(path)) ) {\n                let current = this, paths = path.split(this.__delimiter || '.');\n\n                while ( paths.length > 0 ) {\n                    current = current[ paths[ 0 ] ];\n                    paths   = paths.slice(1);\n                }\n\n                current.push(value);\n            }\n\n            return this;\n        },\n\n        /**\n         * Path Remover\n         * This function will remove property from object, or item from array.\n         *\n         * @param path {string}   - String path. E.g: 'people.disabled' or 'people.childs.0'.\n         * @param length [number] - The length of item that will be removed. Only used to remove array items.\n         * @returns {patches}\n         */\n        $del : function ( path, length ) {\n            /* Define current scope, paths list and done stat */\n            let current = this, paths = path.split(this.__delimiter || '.'), done;\n\n            /* Iterate each path until done */\n            while ( !done && paths.length > 0 ) {\n                /* Define next path */\n                let next = paths[ 0 ];\n\n                /* Last iteration */\n                if ( paths.length <= 1 ) {\n                    /* Delete target using object/array method if exist */\n                    if ( current[ next ] ) {\n                        if ( Array.isArray(current) ) {\n                            current.splice(next, length || 1);\n                        }\n                        else {\n                            delete current[ next ];\n                        }\n                    }\n                }\n                else {\n                    if ( 'object' === typeof current[ next ] ) {\n                        /* Update current scope if next target is exist */\n                        current = current[ next ];\n                    }\n                    else {\n                        /* Escape if not found */\n                        done = true;\n                    }\n                }\n\n                /* Define next path by slicing paths list */\n                paths = paths.slice(1);\n            }\n\n            return this;\n        },\n\n        /**\n         * Object Path Parser\n         * This function will create an object map contains the property paths, recursively.\n         *\n         * @param noroot {boolean} - If true, the root object will excluded. E.g: { a: { d: 2 }, b: 1} will resulting { a.d, b }.\n         * @returns {{}}\n         */\n        $dir : function ( noroot ) {\n            /* Define current path scope and path list */\n            let current = '', maps = {};\n\n            /* Perform Extract */\n            extract(this);\n\n            /* Creating Extractor */\n            function extract ( target ) {\n                /* Iterating each items and properties */\n                target.$each(function ( a, b ) {\n                    /* Copy last path */\n                    let last = current;\n\n                    /* Defining key and value by checking the target type */\n                    let key = Array.isArray(target) ? b : a,\n                        val = Array.isArray(target) ? a : b;\n\n                    /* Creating new path */\n                    let path = current + (!current ? '' : '.') + key;\n\n                    /* Adding path to maps */\n                    if ( 'object' === typeof val ) {\n                        if ( !noroot ) {\n                            maps[ path ] = {\n                                type : Array.isArray(val) ? 'array' : typeof val,\n                                body : val\n                            };\n                        }\n                    }\n                    else {\n                        maps[ path ] = {\n                            type : typeof val,\n                            body : val\n                        };\n                    }\n\n                    /* Extract child scope if the current scope is object or array */\n                    if ( 'object' === typeof val ) {\n                        /* Updating current path */\n                        current = path;\n\n                        /* Perform Extract */\n                        extract(val);\n\n                        /* Revert the current path to bring back the scope */\n                        current = last;\n                    }\n                });\n            }\n\n            /* Returning Maps */\n            return maps;\n        },\n\n        /**\n         * Check the difference between two object.\n         *\n         * @param from {object/array} - Object or array to compare.\n         *                              The source and target type should be equal (object to object) (array to array).\n         * @returns {Object}\n         */\n        $dif : function ( from ) {\n            /* Return zero result if the object source and the object type is not equal. */\n            if ( Array.isArray(this) && !Array.isArray(from) ) return {};\n            if ( Array.isArray(from) && !Array.isArray(this) ) return {};\n\n            // Creating result.\n            let dif = {};\n\n            if ( 'object' === typeof from ) {\n                // Parsing the both object paths.\n                let cur = this.$dir(true);\n                let src = from.$dir(true);\n\n                // Change the iterated items to the higher length.\n                let trg = cur;\n\n                if ( src.$keys().length >= cur.$keys().length ) trg = src;\n\n                // Iterating each path to match the value.\n                trg.$each(( key, val ) => {\n                    if ( this.$get(key) !== from.$get(key) ) {\n                        dif[ key ] = { old : this.$get(key), new : from.$get(key) };\n                    }\n                });\n            }\n\n            return dif;\n        },\n\n        /**\n         * Object and array iterator.\n         * This function is used to iterate properties in object, or items in array.\n         *\n         * @param handler {function} - Function to handle each item.\n         * @param reverse {boolean}  - Does the iteration should reversed (desc).\n         * @returns {patches}\n         */\n        $each : function ( handler, reverse ) {\n            if ( !'function' === typeof handler ) return;\n\n            /* Decide to use Array iterator or Object iterator */\n            if ( Array.isArray(this) ) {\n                let i, ln;\n\n                if ( !reverse ) {\n                    /* Iterating each items */\n                    for ( i = 0, ln = this.length; i < ln; ++i ) {\n                        /* Apply this object to the handler */\n                        handler.call(this, this[ i ], i);\n                    }\n                }\n                else {\n                    for ( i = this.length; i > 0; --i ) {\n                        handler.call(this, this[ (i - 1) ], (i - 1));\n                    }\n                }\n            }\n            else {\n                /* Iterating each properties */\n                for ( let key in this ) {\n                    if ( this.hasOwnProperty(key) ) {\n                        /* Apply this object to the handler */\n                        handler.call(this, key, this[ key ]);\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Object and Array Merger\n         * This function will recursively merge two or more object/array.\n         *\n         * @param sources {object/array} - Object the source object to merge from, or array contains objects to merge from.\n         * @param ignore {array}         - Array contains path to ignore from merging.\n         * @returns {patches}\n         */\n        $join : function ( sources, ignore ) {\n            /* Skip if sources is not an object or array */\n            if ( !'object' === typeof sources ) return;\n\n            /* Wrap source to array if not an array */\n            if ( 'object' === typeof sources && !Array.isArray(sources) ) {\n                sources = [ sources ];\n            }\n\n            /* Create new array if ignore is not an array */\n            if ( !Array.isArray(ignore) ) ignore = [];\n\n            /* Creating target holder and target maps */\n            let main = this, self = this.$dir();\n\n            /* Iterate each sources */\n            for ( let i = 0; i < sources.length; ++i ) {\n                /* Creating source holder and source maps */\n                let base = sources[ i ], next = base.$dir(), igm = '??';\n\n                /* Continue if type of target is equal to type of source */\n                if ( (Array.isArray(main) && Array.isArray(base)) || (!Array.isArray(main) && !Array.isArray(base)) ) {\n                    /* Iterate each maps to do merge */\n                    next.$each(function ( path, value ) {\n                        /* Return if path is ignored */\n                        if ( ignore.indexOf(path) > -1 ) {\n                            igm = path + '.';\n\n                            return;\n                        }\n\n                        /* Ignore childs from first ignored path */\n                        if ( (igm + path.split(igm)[ 1 ]) === path ) {\n                            return;\n                        }\n                        else {\n                            igm = '??';\n                        }\n\n                        /* Create new property if not exist */\n                        if ( !self[ path ] ) {\n                            main.$set(path, value.body);\n                        }\n                        else {\n                            /* Replace with new value if type of next target value is different with type of next target value */\n                            if ( self[ path ].type !== value.type ) {\n                                main.$set(path, value.body);\n                            }\n                            else {\n                                /* Replace if type of next target is not object or array */\n                                if ( value.type !== 'object' && value.type !== 'array' ) {\n                                    main.$set(path, value.body);\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Object and Array Sorter\n         * This function will recursively sort an objects or arrays.\n         *\n         * @param handler [function] - Optional function to handle the sort function.\n         * @returns {*}\n         */\n        $sort : function ( handler ) {\n            /* Perform Sorting */\n            return sort(this);\n\n            /* Creating Sorter */\n            function sort ( target ) {\n                /* Creating result */\n                let result;\n\n                /* Array Sorter */\n                if ( Array.isArray(target) ) {\n                    /* Create array as result */\n                    result = [];\n\n                    /* Sort and iterate each item in target to sort the childs before adding to result */\n                    target.sort(handler).$each(function ( value, i ) {\n                        if ( 'object' !== typeof value ) {\n                            /* Add to result if child is not object or array */\n                            result[ i ] = value;\n                        }\n                        else {\n                            /* Sort child before adding to result */\n                            result[ i ] = sort(value);\n                        }\n                    });\n                }\n\n                /* Object Sorter */\n                else {\n                    /* Create object as result */\n                    result = {};\n\n                    /* Create target keys list to perform sort and iterate eachitem to sort the childs before adding to result */\n                    Object.keys(target).sort(handler).$each(function ( key ) {\n                        /* Creating child from target */\n                        let value = target[ key ];\n\n                        if ( 'object' !== typeof value ) {\n                            /* Add to result if child is not object or array */\n                            result[ key ] = value;\n                        }\n                        else {\n                            /* Sort child before adding to result */\n                            result[ key ] = sort(value);\n                        }\n                    });\n\n                    /* Delete all properties from target */\n                    target.$each(function ( key ) {\n                        delete target[ key ];\n                    });\n\n                    /* Apply sorted properties to target */\n                    result.$each(function ( key, value ) {\n                        target[ key ] = value;\n                    });\n                }\n\n                /* Return the target it self */\n                return target;\n            }\n        },\n\n        /* Object.keys wrapper */\n        $keys : function () {\n            if ( !Array.isArray(this) ) {\n                return Object.keys(this);\n            }\n\n            return this;\n        },\n\n        /**\n         * Array Item Grouper\n         * This function will grouping an items inside an array with the given column per row.\n         *\n         * @param column {number} - Number of column per row.\n         * @param mode {string}   - Wrapping mode, split or chunk.\n         * @returns {*}\n         */\n        $group : function ( column, mode ) {\n            if ( !Array.isArray(this) || !'number' === typeof column ) return;\n\n            /* Create group and current index */\n            let group = [],\n                currn = 0;\n\n            /* Prepare Columns */\n            (column - 1).$each(function ( i ) {\n                group.push([]);\n            });\n\n            /* Start Grouping */\n            if ( mode === 'split' ) {\n                let gpn = Math.ceil(this.length / column),\n                    crg = 1;\n\n                this.$each(function ( val ) {\n                    group[ currn ].push(val);\n\n                    if ( crg === gpn ) {\n                        crg = 1;\n                        currn++;\n                    }\n                    else {\n                        crg++;\n                    }\n                });\n            }\n            else if ( mode === 'chunk' ) {\n                /* Create child group */\n                let childGroup = [];\n\n                /* Reset parent group */\n                group = [];\n\n                this.$each(function ( val, i ) {\n                    /* Push current value to child group */\n                    childGroup.push(val);\n\n                    if ( currn === (column - 1) || i === (this.length - 1) ) {\n                        /* Add child group to parent group */\n                        group.push(childGroup);\n\n                        /* Reste child group */\n                        childGroup = [];\n\n                        /* Reset child index */\n                        currn = 0;\n                    }\n                    else {\n                        /* Increase child index */\n                        currn++;\n                    }\n                });\n            }\n            else {\n                this.$each(function ( val ) {\n                    /* Push value to current child */\n                    group[ currn ].push(val);\n\n                    if ( currn === (column - 1) ) {\n                        /* Reset current child index */\n                        currn = 0;\n                    }\n                    else {\n                        /* Increase current child index */\n                        currn++;\n                    }\n                });\n            }\n\n            return group;\n        },\n    }\n\n    /* Applying Object Extensions */\n    for ( let key in patches ) {\n        /* Locking Extension */\n        Object.defineProperty(Object.prototype, key, {\n            enumerable : false,\n            value      : patches[ key ]\n        });\n    }\n})('undefined' !== typeof global ? global : window);\r\n(function ( jsroot ) {\n    'use strict';\n\n    /* String Patches */\n    let patches = {\n        /* Get lower string at index */\n        lowerAt( idx ) {\n            idx = idx > 26 ? 26 : idx;\n\n            return String.fromCharCode(97 + (idx - 1));\n        },\n\n        /* Get upper string at index */\n        upperAt( idx ) {\n            idx = idx > 26 ? 26 : idx;\n\n            return String.fromCharCode(65 + (idx + 1));\n        }\n    }\n\n    /* String Methods */\n    let methods = {\n        /* String Iterator */\n        $each( handler, reverse ) {\n            if ( !'function' === typeof handler ) return;\n\n            let i, ln;\n\n            if ( !reverse ) {\n                for ( i = 0, ln = this.length; i < ln; ++i ) {\n                    handler.call(this, this[ i ], i);\n                }\n            }\n            else {\n                for ( i = this.length; i > 0; --i ) {\n                    handler.call(this, this[ i - 1 ], (i - 1));\n                }\n            }\n\n            return this;\n        },\n    }\n\n    /* Adding pacthes and methods to the String class */\n    for ( let key in patches ) {\n        /* Locking Extension */\n        Object.defineProperty(String, key, {\n            enumerable : false,\n            value      : patches[ key ]\n        });\n    }\n\n    for ( let key in methods ) {\n        /* Locking Extension */\n        Object.defineProperty(String.prototype, key, {\n            enumerable : false,\n            value      : methods[ key ]\n        });\n    }\n})('undefined' !== typeof global ? global : window);\r\n(function ( jsroot ) {\n    'use strict';\n\n    /* Number Patches */\n    let patches = {\n        /* Generate Random Number Between Two Number */\n        random( start, end ) {\n            return Math.floor(Math.random() * (end - start + 1)) + start;\n        }\n    }\n\n    /* Number Methods */\n    let methods = {\n        /* Number Iterator */\n        $each( handler, reverse ) {\n            if ( !'function' === typeof handler ) return;\n\n            var i;\n\n            if ( !reverse ) {\n                for ( i = 0; i <= this; ++i ) {\n                    handler.call(this, i);\n                }\n            }\n            else {\n                for ( i = this; i >= 0; --i ) {\n                    handler.call(this, i);\n                }\n            }\n\n            return this;\n        }\n    }\n\n    /* Adding pacthes and methods to the Number class */\n    for ( let key in patches ) {\n        /* Locking Extension */\n        Object.defineProperty(Number, key, {\n            enumerable : false,\n            value      : patches[ key ]\n        });\n    }\n\n    for ( let key in methods ) {\n        /* Locking Extension */\n        Object.defineProperty(Number.prototype, key, {\n            enumerable : false,\n            value      : methods[ key ]\n        });\n    }\n})('undefined' !== typeof global ? global : window);\r\n/*# sourceMappingURL=jsfix.js.map */"
  ]
}
